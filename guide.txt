# very basic start new project 

                           https://dev.to/fceruti/setting-up-a-django-project-like-a-pro-353

- create virtualenv/ pipenv

python3 -m venv project-name-with-iphin-venv
eg. python3 -m venv forum-uk-nurses

   cd django-project
   source Scripts\activate
- install project dependency's

#common dependency's
          33 lines (29 sloc)  1.54 KB




# useful

pipenv install -r requirements.txt (install from a requirements.txt file)


pip freeze > requirements.txt (moves all installed dependency's names into a file.)


--------------------------- COMMON DEPENDENCY ---------------------------------
  
# Python
# ------------------------------------------------------------------------------
argon2-cffi  # https://github.com/hynek/argon2_cffi
python-slugify  # https://github.com/un33k/python-slugify
Pillow  # https://github.com/python-pillow/Pillow
pytz  # https://github.com/stub42/pytz
redis  # https://github.com/tporadowski/redis/releases
celery # https://docs.celeryproject.org/en/master/django/first-steps-with-django.html
sentry # raven

whitenoise  # https://github.com/evansd/whitenoise
django-heroku # https://pypi.org/project/django-heroku/
dj-database-url
dj-email-url    
django-celery-results #https://github.com/celery/django-celery-results
django-celery-beat #https://github.com/celery/django-celery-beat
celery #https://github.com/celery/celery


# Django
# ------------------------------------------------------------------------------
django  # pyup: < 2.1  # https://www.djangoproject.com/
django-allauth  # https://github.com/pennersr/django-allauth
django-contrib-comments  # https://github.com/django/django-contrib-comments
django-crispy-forms  # https://github.com/django-crispy-forms/django-crispy-forms
python-decouple # https://github.com/henriquebastos/python-decouple
django-markdownx  # https://github.com/neutronX/django-markdownx
django-redis  # https://github.com/niwinz/django-redis
django-taggit  # https://github.com/alex/django-taggit
sorl-thumbnail  # https://github.com/jazzband/sorl-thumbnail
django-debug-toolbar  # https://github.com/jazzband/django-debug-toolbar
django-anymail  # https://github.com/anymail/django-anymail
django-storages  # https://github.com/jschneier/django-storages
psycopg2 --no-binary psycopg2  # https://github.com/psycopg/psycopg2
django-mptt https://github.com/django-mptt/django-mptt


# Channels
# ------------------------------------------------------------------------------
channels  # https://github.com/django/channels
channels-redis  # https://github.com/django/channels_redis

# docker-compose



(start project)

- django-admin startproject project_name .
NB : use config as project_name
ie. django-admin startproject config .

NB : always create a custom user model.

& create a folder (with the actual name of the project)

(start an app)
- python manage.py startapp app_name



manag.py commands
 (run your server)
- python manage.py runserver
- manage.py runserver
   
 (check for any errors)
 - manage.py check


 (static collection)
 - manage.py collectstatic

 (admin/user)
 - manage.py createsuperuser


"""
NB : . after the project_name

"""


# start an app

python manage.py startapp app_name

NB : create a apps_folder(python app, with __init__.py) to contain all app.

create the app,
- change its app.py file and;
   class App1Config(AppConfig):
    	name = 'apps_folder.app1'

- pick and drop into app_folder

- settings.py
	app_folder.app1.app.App1Config


project url (apps routes register)
 - path('app_path/',include('app_folder.app1.urls',namespace='app1'))




-----------------


venv_name/
     config/
            settings/

               __init__.py

               local.py

               development.py

               production.py

            asgi.py

            urls.py

            celery.py

            wsgi.py
            ....


      project_name/

            __init__.py


            documentation/
               .txt files
               keys.txt
               packages.txt (packages i will need for this project after research, project requirements etc)
               commands.txt (running redis,celery,Heroku, AWS, github commands,redis,etc)
               checkbok.txt (check what ToDO before and after deployment - LIST of things)

               eg. database_schema.txt, packages.txt,commands.txt 


               (guide to project development,features,database diagram)
               (setups,settings etc.)
               it should serve as a guide to every project
               



            users/ (mandatory app)
               ....

            account/ (mandatory)
               ....

            core/ (mandatory app)
               ....

            search/ (mandatory app)
               ....

            conf/ (mandatory app) -> handles project configuration, not settings.py (keep settings.py simple,light)
               ....

            app_name/
               ....

            app_name/
               .....

            templates/
                     (project_name)/
                           app_name (folder)/
                                             eg. account_registeration.html
                                                 account_login.html
                                                 account_password_reset.html
                                                 account_password_change.html
                                                 account_welcome_message.html

                                                 layouts.html

                                             ie. [app_name]__[verb].html
                                             .......

                           robot.txt
                           layout.html
                           aside.html
                           footer.html
                           navbar.html
                           search.html
                           terms_of_service.html
                           privacy_policy.html
                           .....

                     500.html
                     404.html
                     layout.html
                     .... 

            static/
                     (project_name)/
                           css/
                           js/
                           img/
                           vendors/
                           fonts/
                           favicon.ico

            staticfiles/
                     .......

            media/
               ....

            logs/
               ....


            helpers.py

            paginator.py

            middlewares.py


     locale (i18 messages folder)/


     manage.py

     Pipfile

     Pipefile.lock

     requirements.txt

     .env

     .env.example

     .gitignore

     Procfile (optional : Heroku)

     runtime.txt

     README.md

     ....



----------------------

core/
      documentation/
         .txt file (docs about this app)

      management/
         commands/
         .....

      templatetag/
         ....

      permissions/
         ....

      validators/
         ...

      api/ (any consuming api for the project)
         ...

      mail/
         ...

      fields/
         ...

      middlewares/
         ...

      context_processors.py

      decorators.py

      exceptions.py

      error_codes.py

      signals.py

      tasks/
         ___init__.py (keep the codes here)

      utils/
         functions.py
         slug.py
         time.py
         signals.py
         text.py
         ...



Eg. users app/

      documentation/
         .txt file (docs about this app)

      api/
         v1/
            authentication.py
            permissions.py
            serializers.py
            pagination.py
            validators.py
            request.py
            conf.py
            throttling.py
            utils.py
            views.py
            ...

      models/
         validator.py
         exceptions.py
         bans.py
         user.py
         ....

      managers/
         ....

      management/
         commands/
         .....

      templatetag/
         ....


      templates/
         ....

      static/
         ....

      tests/
         test_models.py
         test_views.py
         test_auth.py
         test_activations.py

         ....


      fixtures/
         ....


      forms/
         validators.py
         .....

      avatars/
         validations.py
         gravatar.py
         avatar.py
         images.py
         ....



      permissions/
         ....


      emails.py (all user email handlers)

      validators.py

      tokens.py

      services.py

      authentication/
         recapture.py
         backend_auth.py
         ....

      middlewares.py

      context_processors.py

      decorators.py

      exceptions.py

      error_codes.py

      signals.py

      utils.py

      .....

      views/
         activation.py

         auth.py

         profile.py

         passwords.py

         ...






///////


js framework ;

NB : separate frontend proj codebase from backend
as done by taiga, wagtail etc.






----------------------------------------------------------------
make a requirements.txt file for common packages for all projects and extra etc